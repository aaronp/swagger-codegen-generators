{{>licenseInfo}}

package {{modelPackage}}


opaque type HttpData = Map[String, _]
object HttpData {
  def apply(pears : (String, _)*): HttpData = pears.toMap
}

extension (data: HttpData) {
  def toMap: Map[String, _] = data
}
case class RequestData[A](
    path: String,
    headers: HttpData = HttpData(),
    cookies: HttpData = HttpData(),
    formData: HttpData = HttpData(),
    queryParams: HttpData = HttpData(),
    body: Option[A] = None
)

enum HttpRequest[A]:
  case Get(content: RequestData[A])
  case Put(content: RequestData[A])
  case Post(content: RequestData[A])
  case Delete(content: RequestData[A])
  case Patch(content: RequestData[A])
  case Custom(method: String, content: RequestData[A])

  def content: RequestData[A]
  def url: String = content.path